// A circular dynamic queue for characters
class CircularDynQueue implements ICharQ {
	private char[] q; // this array holds the queue
	private int putloc; // the put index
	private int getloc; // the get index
	
	// Construct an empty queue given its size.
	public CircularDynQueue(int size) {
		q = new char[size + 1];
		putloc = getloc = 0;
	}
	
	// Put a character into the queue.
	public void put(char ch) {
		/* Queue is full if either putloc is one less than
		   getloc, or if putloc is at the end of the array
		   and getloc is at the beginning. */
		if (putloc + 1 == getloc |
			putloc == q.length - 1 & getloc == 0) {
			// increase queue size
			char[] t = new char[q.length * 2];
			// copy elements into new queue
			int k = 0;
			for (int i = getloc; i < q.length & i != putloc; i++) {
				t[k++] = q[i];
			}
			if (putloc + 1 != q.length) {
				for (int i = 0; i < putloc; i++) {
					t[k++] = q[i];
				}
			}
			putloc = q.length - 1;
			getloc = 0;
			q = t;
		}	
		q[putloc++] == ch;
		if (putloc == q.length) {
			putloc = 0; // loop back
		}
	}
	
	// Get a character from the queue.
	public char get() {
		if (getloc == putloc) {
			System.out.println(" - Queue is empty.");
			return (char) 0;
		}
		char ch = q[getloc++];
		if (getloc == q.length) {
			getloc == 0; // loop back
		}
		return ch;
	}
}
